@using Newtonsoft.Json;
@using BaseBlazorAdmin.Data;
@using System.Text;
@inject HttpClient http
@inject IJSRuntime JSRuntime

<center>
    <div style="max-width:95%; align-content:center">
        <EditForm Model="@clienteView" OnValidSubmit="@Salvar" OnInvalidSubmit="@Salvar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <MudCard>
                <MudCardHeader>Pré-Cadastro</MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
                        DADOS PARA O CONTRATO DE TERCEIRIZAÇÃO
                    </MudText>

                    <MudText Typo="Typo.h5" Align="Align.Left">Dados Pessoais</MudText>

                    <MudGrid>
                        <MudItem xs="8">
                            <MudTextField T="string" @bind-Value="clienteView.Nome" Label="Nome completo" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="DateTime" Variant="Variant.Outlined" @bind-Value="clienteView.DT_Nasc" Label="Data de Nascimento" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Label="Telefone" @bind-Value="clienteView.Telefone" Variant="Variant.Outlined" />
                         @*   <MudTextMask mascara="(00) 00000-0000" margin="Margin.None" variant="Variant.Outlined" label="Telefone" @bind-valor="clienteView.Telefone" />*@
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Label="E-Mail" @bind-Value="clienteView.email" Variant="Variant.Outlined" />
                        </MudItem>
                         <MudItem xs="4" >
                            <MudAutocomplete T="string" Label="Sexo"  SearchFunc="@Searchsexo"
                                             ResetValueOnEmptyText="@resetValueOnEmptySexo"
                                             CoerceText="@ReceberTextSexo" CoerceValue="@ReceberValueSexo"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                         
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Label="CPF/CNPJ" @bind-Value="clienteView.CPF_CNPJ" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.RG" Label="RG" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.RG_Orgao_Emissor" Label="Orgão Emissor" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudTextField T="string" Label="Profissão" @bind-Value="clienteView.Profissao" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Nacionalidade" @bind-Value="clienteView.Nacionalidade" SearchFunc="@SearchNacionalidade"
                                             ResetValueOnEmptyText="@resetValueOnEmptyNacionalidade"
                                             CoerceText="@ReceberTextNacionalidade" CoerceValue="@ReceberValueNacionalidade"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                        <MudItem xs="4" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Estado Civil" @bind-Value="clienteView.Estado_Civil" SearchFunc="@SearchEstadoCivil"
                                             ResetValueOnEmptyText="@resetValueOnEmptyEstadoCivil"
                                             CoerceText="@ReceberTextEstadoCivil" CoerceValue="@ReceberValueEstadoCivil"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                        <MudItem xs="4" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Regime de Bens" @bind-Value="clienteView.Regime_de_Bens" SearchFunc="@SearchRegimeBens"
                                             ResetValueOnEmptyText="@resetValueOnEmptyRegimeBens"
                                             CoerceText="@ReceberTextRegimeBens" CoerceValue="@ReceberValueRegimeBens"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Endereço Residencial</MudText>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @onfocusout="GetCepInformacoes" Label="CEP" @bind-Value="clienteView.Endereco_CEP" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Rua" @bind-Value="clienteView.Endereco_Rua" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Numero" @bind-Value="clienteView.Endereco_Numero" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>

                        <MudItem xs="3">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Complemento" @bind-Value="clienteView.Endereco_Complemento" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Bairro" Variant="Variant.Outlined" Label="Bairro" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Cidade" Variant="Variant.Outlined" Label="Cidade" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Estado" Label="UF" Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>

                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Informações Bancárias</MudText>
                    <MudGrid>
                        <MudItem xs="2">
                            <MudTextField T="string" @bind-Value="clienteView.CodBanco" Variant="Variant.Outlined" @onmouseover="GetBancos" Label="Codigo do Banco" />
                        </MudItem>

                        <MudItem xs="2">
                            <MudTextField T="string" @bind-Value="informacoesBancos.fullName" Variant="Variant.Outlined" Label="Banco" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Agencia" @bind-Value="clienteView.CodAgencia" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Numero da Conta" @bind-Value="clienteView.NumConta" />
                        </MudItem>
                        <MudRadioGroup @bind-SelectedOption="@SelectedTipoConta" @bind-value="clienteView.TipoConta">
                            <MudRadio Option="@("1")" value="1" Color="Color.Primary">Conta Corrente</MudRadio>
                            <MudRadio Option="@("2")" value="2" Color="Color.Primary">Conta Poupança </MudRadio>
                        </MudRadioGroup>
                        
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.NomeFavorecido" Label="Nome do Favorecido da Conta" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.CPFFavorecido" Label="CPF ou CNPJ do Favorecido da Conta" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField T="double" Variant="Variant.Outlined" @bind-Value="clienteView.ValorContrato" Label="Valor do Contrato" Adornment="Adornment.Start" AdornmentText="R$" AdornmentColor="Color.Success" HideSpinButtons="true" Format="#,###,###0.00" />
                        </MudItem>

                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Informações do Contrato</MudText>

                    <MudGrid>
                        <MudItem xs="2">
                            <MudText Align="Align.Center" GutterBottom="true">
                                Prazo de Contrato
                            </MudText>

                            <MudRadioGroup @bind-SelectedOption="@SelectedPrazoContrato" @bind-value="@clienteView.PrazoContrato">
                                <MudRadio Option="@("1")" Color="Color.Primary">24 Meses</MudRadio>
                                <MudRadio Option="@("2")" Color="Color.Primary">36 Meses</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Align="Align.Center" GutterBottom="true">Tipo de Entrega de Contrato</MudText>

                            <MudRadioGroup @bind-SelectedOption="@SelectedTipoEntrega" @bind-value="@clienteView.TipoEntrega">
                                <MudRadio Option="@("1")" Color="Color.Primary"> Contrato Cartório, Irá buscar na Consultoria</MudRadio>
                                <MudRadio Option="@("2")" Color="Color.Primary">Contrato Cartório Enviar Correios</MudRadio>
                                <MudRadio Option="@("3")" Color="Color.Primary">Contrato Digital</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="2">
                            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Filled.CloudUpload"
                                       for="fileInput">
                                Carregar Foto
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Enviar</MudButton>
                </MudCardActions>
            </MudCard>

        </EditForm>
    </div>
</center>





@code{

    [Parameter]
    public Ticket Ticket { get; set; }

    public Cliente clienteView { get; set; } = new Cliente();

    public bool ticketValido { get; set; } = true;

    protected override void OnInitialized()
    {
        //Verificar o ticket que esta na url
        //Jogar dentro de uma variavel
        //Validar Ticket

    }

    private async Task Salvar()
    {

        var cli = new TESTE()
        {
            ticket = "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            cliente = new Cliente()
            {
                id = 0,
                Nome = "ale",
                DT_Nasc = DateTime.Now,
                CPF_CNPJ = "002",
                RG = "0824",
                RG_Orgao_Emissor = "ifp",
                Profissao = "adm",
                Nacionalidade = "brasil",
                Estado_Civil = "casado",
                Regime_de_Bens = "parcial",
                Telefone = "22",
                email = "marins",
                Sexo = 1,
                Endereco_CEP = "22894",
                Endereco_Rua = "bernad",
                Endereco_Numero = "203",
                Endereco_Complemento = "301",
                Endereco_Bairro = "boqueirao",
                Endereco_Cidade = "spa",
                Endereco_Estado = "rj",
                CodBanco = "2",
                CodAgencia = "2",
                NumConta = "2",
                TipoConta = 1,
                NomeFavorecido = "Ale",
                CPFFavorecido = "002",
                ValorContrato = 10,
                PrazoContrato = 24,
                TipoEntrega = 1,
                Tipo_Doc_Identificacao = 2,
                Foto_Doc_Identificacao = "a",
                idAcesso = 1,
                idConsultor = 1,
                Status = 2
            }
        };
        var url = "/api/cliente/PostIncluircomTicket";
        var ClienteInput = new TESTE();
        ClienteInput.ticket = Ticket.id.ToString();
        ClienteInput.cliente = clienteView;

        var retorno = await http.PostAsJsonAsync(url, ClienteInput);

        if (retorno.IsSuccessStatusCode)
        {
            var ret = await retorno.Content.ReadAsAsync<bool>();
            if (ret)
            { //Cadastro feito com successo
                await JSRuntime.InvokeVoidAsync("alert", "Funcionou bem!");
            }
            else
            {
                // Deu merda
                await JSRuntime.InvokeVoidAsync("alert", "Deu ruim!");
            }
        }
    }

    //auto complite diversos---------------------------------------------

    // Autocomplete Nacionalidade ------------------------
    private bool resetValueOnEmptyNacionalidade;
    private bool ReceberTextNacionalidade;
    private bool ReceberValueNacionalidade;
    private string valueNacionalidade, valueNacionalidade1;

    private string[] Nacionalidade =
    {"Brasil",
     "Portugal",
     "Estados Unidos"
    };

     private async Task<IEnumerable<string>> SearchNacionalidade(string valueNacionalidade)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(valueNacionalidade))
            return new string[0];
        return Nacionalidade.Where(x => x.Contains(valueNacionalidade, StringComparison.InvariantCultureIgnoreCase));
    }
     // FIM Autocomplete Nacionalidade ------------------------

    // Autocomplete Estado Civel ------------------------
    private bool resetValueOnEmptyEstadoCivil;
    private bool ReceberTextEstadoCivil;
    private bool ReceberValueEstadoCivil;
    private string valueEstadoCivil, valueEstadoCivil1;

    private string[] EstadoCivil =
    {"Solteiro",
     "Casado",
     "Viuvo",
     "Divorciado"
    };
     private async Task<IEnumerable<string>> SearchEstadoCivil(string valueEstadoCivil)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(valueEstadoCivil))
            return new string[0];
        return EstadoCivil.Where(x => x.Contains(valueEstadoCivil, StringComparison.InvariantCultureIgnoreCase));
    }
    // FIM Autocomplete Estado Civil ------------------------

    // Autocomplete Regime Bens ------------------------

    private bool resetValueOnEmptyRegimeBens;
    private bool ReceberTextRegimeBens;
    private bool ReceberValueRegimeBens;
    private string valueRegimeBens, valueRegimeBens1;
    private string[] RegimeBens =
    {"Comunhão total de Bens",
     "Comunhão Parcial de Bens",
     "Separação de Bens"
    };
     private async Task<IEnumerable<string>> SearchRegimeBens(string valueRegimeBens)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(valueRegimeBens))
            return new string[0];
        return RegimeBens.Where(x => x.Contains(valueRegimeBens, StringComparison.InvariantCultureIgnoreCase));
    }
    // FIM Autocomplete Regime Bens ------------------------

    // Autocomplete Sexo ------------------------
    private bool resetValueOnEmptySexo;
    private bool ReceberTextSexo;
    private bool ReceberValueSexo;
    private string valueSexo, valueSexo1;
    private string[] Sexo =
    {"Masculino",
     "Feminino",
     "Outros"
    };
    
      private async Task<IEnumerable<string>> Searchsexo(string valueSexo)
    {
       

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(valueSexo))
            return new string[0];
        return Sexo.Where(x => x.Contains(valueSexo, StringComparison.InvariantCultureIgnoreCase));
    }

    // FIM Autocomplete Sexo ------------------------

    // FIM auto complite diversos---------------------------------------------

    //API Busca CEP ------------------------------------------------------------------------

    Endereco informacoesCep = new Endereco();
    List<string> listaDeCeps = new List<string>();
    string InfoCep;

    private async void GetCepInformacoes()
    {
        string url = "https://brasilapi.com.br/api/cep/v1/{" + InfoCep + "}";

        using (var cep = new HttpClient())
        {
            HttpResponseMessage resposta = await cep.GetAsync(url);
            string json = await resposta.Content.ReadAsStringAsync();
            informacoesCep = JsonConvert.DeserializeObject<Endereco>(json);
        }
    }

    // FIM API Busca CEP ------------------------------------------------------------------------


    //API Busca Bancos ------------------------------------------------------------------------
    Bancos informacoesBancos = new Bancos();
    List<string> listaDeBancos = new List<string>();
    string InfoBanco;

    private async void GetBancos()
    {

        string url = "https://brasilapi.com.br/api/banks/v1/{0" + InfoBanco + "}";

        using (var bancos = new HttpClient())
        {
            HttpResponseMessage resposta = await bancos.GetAsync(url);
            string json = await resposta.Content.ReadAsStringAsync();
            informacoesBancos = JsonConvert.DeserializeObject<Bancos>(json);
        }
    }

    //FIM API Busca Bancos ------------------------------------------------------------------------

    //Checkbox ---------------------------------------------------
    public string SelectedTipoConta { get; set; }
    
    

    private void Reset()
    {
        SelectedTipoConta = null;
    }


    public string SelectedPrazoContrato { get; set; }

    private void Reset1()
    {
        SelectedPrazoContrato = null;
    }


    public string SelectedTipoEntrega { get; set; }

    private void Reset2()
    {
        SelectedTipoEntrega = null;
    }
    // upload de fotos

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }


    public class TESTE
    {
        public string ticket { get; set; }
        public Cliente cliente { get; set; }
    }

}