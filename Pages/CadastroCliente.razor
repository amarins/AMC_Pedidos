@page  "/CadastroCliente"
@using Newtonsoft.Json;
@using BaseBlazorAdmin.Data;
@inject HttpClient http
@inject IJSRuntime js


<center>
    <div style="max-width:95%; align-content:center">
        <EditForm Model="@clienteView" OnValidSubmit="@Salvar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <MudCard>
                <MudCardHeader>Pré-Cadastro</MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
                        CONTRATO DE TERCEIRIZAÇÃO
                    </MudText>

                    <MudText Typo="Typo.h5" Align="Align.Left">Clientes Ativos</MudText>

                    <br />


                    <MudSimpleTable Hover="true" Dense="true" FixedHeader="@fixedheader" Style="@(fixedheader?"height:300px;":"")">
                        <thead>
                            <tr>
                                @foreach (var h in headings)
                                {
                                    <th>@h</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in rows)
                            {
                                <tr>
                                    @foreach (var x in row.Split())
                                    {
                                        <td>@x</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                  

                    <MudText Typo="Typo.h5" Align="Align.Left">Dados Pessoais</MudText>


                    <MudGrid>
                        <MudItem xs="8">
                            <MudAutocomplete T="string" Label="Nome do Investidor" @bind-Value="clienteView.Nome" SearchFunc="@Search2"
                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                             CoerceText="@coerceText" CoerceValue="@coerceValue"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>

                        <MudItem xs="4">
                            <MudTextField T="DateTime" Variant="Variant.Outlined" @bind-Value="clienteView.DT_Nasc" Label="Data de Nascimento" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="Telefone" @bind-Value="clienteView.Telefone" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" Label="E-Mail" @bind-Value="clienteView.email" Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Label="CPF/CNPJ" @bind-Value="clienteView.CPF_CNPJ" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.RG" Label="RG" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.RG_Orgao_Emissor" Label="Orgão Emissor" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudTextField T="string" Label="Profissão" @bind-Value="clienteView.Profissao" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Nacionalidade" @bind-Value="clienteView.Nacionalidade" SearchFunc="@Search2"
                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                             CoerceText="@coerceText" CoerceValue="@coerceValue"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                        <MudItem xs="4" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Estado Civil" @bind-Value="clienteView.Estado_Civil" SearchFunc="@Search4"
                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                             CoerceText="@coerceText1" CoerceValue="@coerceValue1"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                        <MudItem xs="4" sm="6" md="3">
                            <MudAutocomplete T="string" Label="Regime de Bens" @bind-Value="clienteView.Regime_de_Bens" SearchFunc="@Search3"
                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                             CoerceText="@coerceText2" CoerceValue="@coerceValue2"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Endereço Residencial</MudText>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @onmouseover="GetCepInformacoes" Label="CEP" @bind-Value="clienteView.Endereco_CEP" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Rua" @bind-Value="clienteView.Endereco_Rua" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Numero" @bind-Value="clienteView.Endereco_Numero" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Complemento" @bind-Value="clienteView.Endereco_Complemento" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Bairro" Variant="Variant.Outlined" Label="Bairro" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Cidade" Variant="Variant.Outlined" Label="Cidade" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" @bind-Value="clienteView.Endereco_Estado" Label="UF" Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Informações Bancárias</MudText>
                    <MudGrid>
                        <MudItem xs="2">
                            <MudTextField T="string" @bind-Value="clienteView.CodBanco" Variant="Variant.Outlined" @onmouseover="GetBancos" Label="Codigo do Banco" />
                        </MudItem>

                        <MudItem xs="2">
                            <MudTextField T="string" @bind-Value="informacoesBancos.fullName" Variant="Variant.Outlined" Label="Banco" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Agencia" @bind-Value="clienteView.CodAgencia" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Numero da Conta" @bind-Value="clienteView.NumConta" />
                        </MudItem>
                        <MudTextField T="int" Variant="Variant.Outlined" Label="Tipo de Conta" @bind-Value="clienteView.TipoConta" />
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.NomeFavorecido" Label="Nome do Favorecido da Conta" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="clienteView.CPFFavorecido" Label="CPF ou CNPJ do Favorecido da Conta" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField T="double" Variant="Variant.Outlined" @bind-Value="clienteView.ValorContrato" Label="Valor do Contrato" Adornment="Adornment.Start" AdornmentText="R$" AdornmentColor="Color.Success" HideSpinButtons="true" Format="##,#0.00" />
                        </MudItem>

                    </MudGrid>
                    <br />
                    <MudText Typo="Typo.h5" Align="Align.Left">Informações do Contrato</MudText>

                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField T="int" Variant="Variant.Outlined" Label="Duração do Contrato" @bind-Value="clienteView.PrazoContrato" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="int" Variant="Variant.Outlined" Label="Tipo Entrega" @bind-Value="clienteView.TipoEntrega" />

                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Fotos Do Documento" @bind-Value="clienteView.Foto_Doc_Identificacao" />

                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Enviar</MudButton>
                </MudCardActions>
            </MudCard>

        </EditForm>
    </div>
</center>





@code{

    //-------------------------------------------------------------------

    bool fixedheader = true;
    string[] headings = { "ID", "Name", "Email", "Sexo", "Data Contrato" };
    string[] rows = {
        @"1 Krishna kpartner0@usatoday.com Masculino 01/01/2020",
        @"2 Webb wstitle1@ning.com Masculino 05/02/2020",
        @"3 Nathanil nneal2@cyberchimps.com Masculino 10/05/2020",
        @"4 Adara alockwood3@patch.com Feminino 11/07/2020",
    };

    //-------------------------------------------------------------------

    [Parameter]
    public Ticket Ticket { get; set; }

    public ClienteView clienteView { get; set; } = new ClienteView();

    public bool ticketValido { get; set; } = true;

    protected override void OnInitialized()
    {
        //Verificar o ticket que esta na url
        //Jogar dentro de uma variavel
        //Validar Ticket

    }

    private async Task Salvar()
    {
        var url = "https://localhost:44312/api/cliente/PostIncluircomTicket";
        var ClienteInput = new TESTE();
        ClienteInput.Ticket = Ticket.id.ToString();
        ClienteInput.Cliente = clienteView;

        var retorno = await http.PostAsJsonAsync(url, ClienteInput);

        if (retorno.IsSuccessStatusCode)
        {
            var ret = await retorno.Content.ReadAsAsync<bool>();
            if (ret)
            { //Cadastro feito com successo
                await js.InvokeVoidAsync("alert", "Funcionou bem!");
            }
            else
            {
                // Deu merda
                await js.InvokeVoidAsync("alert", "Deu ruim!");
            }
        }
    }

    //auto complite diversos---------------------------------------------
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    private string[] Nacionalidade =
    {"Brasil",
     "Portugal",
     "Estados Unidos"
    };

    private bool coerceText1;
    private bool coerceValue1;
    private string value3, value4;
    private string[] EstadoCivil =
    {"Solteiro",
     "Casado",
     "Viuvo",
     "Divorciado"
    };

    private bool coerceText2;
    private bool coerceValue2;
    private string value5, value6;
    private string[] RegimeBens =
    {"Comunhão total de Bens",
     "Comunhão Parcial de Bens",
     "Separação de Bens"
    };


    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return Nacionalidade.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> Search3(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return RegimeBens.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> Search4(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return EstadoCivil.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // FIM auto complite diversos---------------------------------------------

    //API Busca CEP ------------------------------------------------------------------------

    Endereco informacoesCep = new Endereco();
    List<string> listaDeCeps = new List<string>();
    string InfoCep;

    private async void GetCepInformacoes()
    {
        string url = "https://brasilapi.com.br/api/cep/v1/{" + InfoCep + "}";

        using (var cep = new HttpClient())
        {
            HttpResponseMessage resposta = await cep.GetAsync(url);
            string json = await resposta.Content.ReadAsStringAsync();
            informacoesCep = JsonConvert.DeserializeObject<Endereco>(json);
        }
    }

    // FIM API Busca CEP ------------------------------------------------------------------------


    //API Busca Bancos ------------------------------------------------------------------------
    Bancos informacoesBancos = new Bancos();
    List<string> listaDeBancos = new List<string>();
    string InfoBanco;

    private async void GetBancos()
    {

        string url = "https://brasilapi.com.br/api/banks/v1/{0" + InfoBanco + "}";

        using (var bancos = new HttpClient())
        {
            HttpResponseMessage resposta = await bancos.GetAsync(url);
            string json = await resposta.Content.ReadAsStringAsync();
            informacoesBancos = JsonConvert.DeserializeObject<Bancos>(json);
        }
    }

    //FIM API Busca Bancos ------------------------------------------------------------------------

    //Checkbox ---------------------------------------------------
    public string SelectedTipoConta { get; set; }


    private void Reset()
    {
        SelectedTipoConta = null;
    }


    public string SelectedTipoContrato { get; set; }

    private void Reset1()
    {
        SelectedTipoContrato = null;
    }
    public string SelectedPraoContrato { get; set; }

    private void Reset2()
    {
        SelectedPraoContrato = null;
    }
    // upload de fotos

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }


    public class TESTE
    {
        public string Ticket { get; set; }
        public ClienteView Cliente { get; set; }
    }

}